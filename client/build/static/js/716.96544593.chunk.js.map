{"version":3,"file":"static/js/716.96544593.chunk.js","mappings":"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","sources":["pages/singleNFT.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { StateContext } from '../context/StateContext';\r\nimport { MsgContext } from '../context/msgcontext';\r\nimport { imgToBase64String, imgURLFromBase64String } from \"../helpers/imgBLOBto64\";\r\nimport { connectToChain, currentAddress, signer,  currentNetwork, oldNetwork, mintNFT, blockchainNetworks } from \"../helpers/web3Helpers\";\r\nimport { validateIMGtype } from \"../helpers/imgdatahelpers\";\r\nimport { imgSignature } from \"../helpers/imgSignatures\";\r\nimport { isAplhaNumeric } from \"../helpers/stringValidator\";\r\nimport yaadcontract from '../contracts/yaad.json';\r\nimport nftcontract from '../contracts/the_yaad.sol';\r\nimport { DaInput, BoxTitle, Buttonz } from '../components/form/formcomps';\r\nimport { LoadingBox, showLoading, hideLoading } from \"../components/ui/loading\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SingleNft (props){    \r\n    const defaultErrorStack = { intervalId:null, formdata:[], substate:null };\r\n    const { state, setState } = useContext( StateContext );\r\n    const { msg, setMsg } = useContext( MsgContext );\r\n    \r\n    const handlesingleUpload = async (e)=>{\r\n        showLoading();\r\n        let fileLoaded = 0;\r\n        imgSignature(e.target.files[0], (fl)=>{\r\n            console.log(`file signature: ${fl}`);\r\n        })\r\n        const file = e.target.files[0];\r\n        const readr = new FileReader();\r\n        readr.addEventListener(\"load\", ()=>{\r\n            fileLoaded++;\r\n            // console.log(`results: ${readr.result}`);\r\n            if ( fileLoaded === 1 ){\r\n                hideLoading();\r\n                return;\r\n            }\r\n\r\n        });\r\n\r\n        const uurl = readr.readAsDataURL( file );\r\n        return;\r\n        // const imgstring = await imgToBase64String(file);\r\n        // state.data.file\r\n        let body = new FormData();\r\n        let newItemName = ( state.data?.filename )? state.data?.filename.split('.'):null;\r\n        \r\n        newItemName?.pop();\r\n        let conntd = await connectToChain( blockchainNetworks[6] );\r\n    \r\n        if ( conntd !== false ) { body.append('account', conntd) } else { return false; }\r\n        let assetName = conntd+\"__\"+Date.now()+\".\"+e.target.files[0].name.split('.')[e.target.files[0].name.split('.').length-1];\r\n        body.append('single_asset', e.target.files[0], assetName);\r\n        \r\n        if ( state.data?.filename ) body.append( 'name', state.data?.filename );\r\n        \r\n        const singleUploaded = await fetch(`${state.baseServerUri}upldSingle`, {method:\"POST\", body, }).then( (res)=> res.json() ).then( (piss)=> piss );\r\n        \r\n        if(singleUploaded.error){\r\n            setState( (prev)=> ( {...prev, data: singleUploaded } ) );\r\n        }else{\r\n            setState( (prev)=>( {...prev, state: \"createbox\", data: singleUploaded, currsubState: \"SingleNFTDetailsForm\" } ));\r\n        }\r\n    }\r\n\r\n    function SingleNFTDetailsForm (props){\r\n        const handlesingleCreate = async (e)=>{\r\n            e.target.classList.add('inactive'); showLoading(); e.preventDefault();\r\n            if(!state.data?.name || state.data?.name === \"\" || state.data?.name === null || state.data?.name  === undefined || !state.data?.collection || state.data?.collection === null || state.data?.collection === \"\" || state.data?.collection === undefined){\r\n                hideLoading();\r\n                return setMsg( (prev)=>({...prev, formdata:[{ id:\"singleNFTName\", value:\"\", msg:\"Please enter a name & collection\" }], substate:state.currsubState }));\r\n            }\r\n            \r\n            let body = new FormData();\r\n            body.append('data', JSON.stringify(state.data) );\r\n            const createNft = await fetch(state.baseServerUri+\"createone\", { method:\"POST\", body,}).then((res)=> res.json()).then( (piss)=> piss );\r\n            \r\n            if(createNft.error){\r\n                if(createNft.error.message === \"duplicate\"){\r\n                    hideLoading();\r\n                    return setMsg( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"This NFT already exists, please select an original design.\" }], substate:state.currsubState }));\r\n                }\r\n                hideLoading();\r\n                setState( (prev)=>( {...prev, currsubState: \"SingleNFTDetailsForm\" } ));                \r\n            }\r\n            \r\n            if( createNft.results ){\r\n                const minted = await mintNFT( createNft.results.IpfsHash ).finally((resp)=>resp);\r\n                if( minted.code === \"ACTION_REJECTED\" ){\r\n                    hideLoading();\r\n                    e.target.classList.remove('inactive');\r\n                    return setMsg( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"Transaction rejected!\" }], substate:state.currsubState }));\r\n                }\r\n                console.log(`minted----- ${JSON.stringify(minted)}`);\r\n                if(minted.hash){\r\n                    return setState( (prev)=>( {...prev, currsubState: \"NFTminted\" } ));\r\n                }\r\n                \r\n                e.target.classList.remove('inactive'); hideLoading();\r\n            }\r\n        }\r\n\r\n        const inputChnages = async (e)=>{\r\n            const ele = e.target;\r\n            \r\n            switch ( e.target.getAttribute('name') ) {\r\n                case 'name':\r\n                    state.data.name = ele.value;\r\n                    break;\r\n                case 'collection':\r\n                    state.data.collection = ele.value;\r\n                    break;\r\n                case 'price':\r\n                    state.data.price = ele.value;\r\n                    break;\r\n                case 'royalties':\r\n                    state.data.royalties = ele.value;\r\n                    break;\r\n                case 'desc':\r\n                    state.data.description = ele.value;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        \r\n        return(\r\n            <>\r\n                <label className='popupBoxEleDetailsLabel' id='createSingleBoxPreview' htmlFor=\"createSingleAssetUpld\" onClick={ ()=>{ document.querySelector('#single_asset').click() } }>\r\n                    <div className='popupBoxEleDetails' style={{padding:( state.data?.path )?'0px':'30px', boxSizing:'border-box'}}> <img src={( state.data?.path )? state.data?.path:'uploadimg.svg' } style={{objectFit:\"cover\", height: \"100%\", width:\"100%\"}} alt=\"\"/> </div>\r\n                </label>\r\n                <input type=\"file\" id='single_asset' name='single_asset' accept=\"image/*,video/*,audio/*,webgl/*,.glb,.gltf\" style={{opacity:100, zIndex:1}} onChange={handlesingleUpload} hidden/>\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.name )?state.data?.name:'Name' } type=\"text\" name='name' id='singleNFTName' onChange={ inputChnages } style={ {opacity:100, zIndex:1 } } />\r\n                <DaInput data={{ typeId:'singleNFTDesc', typeClass:'popupBoxTextAreaEle', name:'desc', placeholder:( state.data?.description )?state.data?.description:'Description', type:'textarea', onChange:inputChnages } } />\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.collection )?state.data?.collection:'Collection' } type=\"text\" name='collection' id='singleNFTColl' onChange={ inputChnages }  style={{opacity:100, zIndex:1}} />\r\n                <div style={{ flexDirection:\"row\", maxWidth:'600px', width: '100%', margin: '0px auto' }}>\r\n                    <input className='popupBoxSmallTextAreaLeftEle' placeholder={ ( state.data?.price )?state.data?.price:'Price' } type=\"number\" name='price' id='singleNFTPrice' onChange={ inputChnages }  style={{opacity:100, zIndex:1}} />\r\n                    <input className='popupBoxSmallTextAreaRightEle' placeholder={ ( state.data?.royalties )?state.data?.royalties:'Royalties: max 50%' } type=\"number\" name='royalties' id='singleNFTRoyalty' onChange={inputChnages} style={{opacity:100, zIndex:1}} />\r\n                </div>\r\n                <Buttonz data={ { class:\"popupBoxEle\", id:'createBox', value:'create', func:handlesingleCreate } } />\r\n            </>\r\n        )\r\n            \r\n    };\r\n\r\n    // let singleNFTDetailsForm = (state.currsubState === \"SingleNFTDetailsForm\")?<SingleNFTDetailsForm/>:\"\";\r\n    return (\r\n        <div className='popupdark'>\r\n            <div className='popupBox'> \r\n                <button className='closeBox' onClick={()=> setState((prev)=>({...prev, state:\"home\", data:{ coll_name : null, coll_symbol : null, layers:[] }, currsubState:null })) } >X</button>\r\n                <SingleNFTDetailsForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleNft;"],"names":["props","useContext","StateContext","state","setState","MsgContext","setMsg","msg","handlesingleUpload","e","showLoading","fileLoaded","imgSignature","target","files","fl","console","log","file","readr","FileReader","addEventListener","hideLoading","readAsDataURL","conntd","body","append","assetName","Date","now","name","split","length","data","filename","fetch","baseServerUri","method","then","res","json","piss","singleUploaded","error","prev","currsubState","SingleNFTDetailsForm","handlesingleCreate","classList","add","preventDefault","undefined","collection","formdata","id","value","substate","FormData","JSON","stringify","createNft","message","results","mintNFT","IpfsHash","finally","resp","minted","code","remove","hash","inputChnages","ele","getAttribute","price","royalties","description","className","htmlFor","onClick","document","querySelector","click","style","padding","path","boxSizing","src","objectFit","height","width","alt","type","accept","opacity","zIndex","onChange","hidden","placeholder","typeId","typeClass","flexDirection","maxWidth","margin","class","func","coll_name","coll_symbol","layers"],"sourceRoot":""}
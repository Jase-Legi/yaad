{"version":3,"file":"static/js/716.8e5a8ec7.chunk.js","mappings":"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","sources":["pages/singleNFT.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { StateContext } from '../context/StateContext';\r\nimport { MsgContext } from '../context/msgcontext';\r\n// import { BigNumber } from \"ethers\";\r\nimport { imgToBase64String, imgURLFromBase64String, base64ToBlob } from \"../helpers/imgBLOBto64\";\r\nimport { connectToChain, currentAddress, signer,  currentNetwork, oldNetwork, mintNFT, blockchainNetworks } from \"../helpers/web3Helpers\";\r\nimport { validateIMGtype } from \"../helpers/imgdatahelpers\";\r\nimport { imgSignature, getFileExtension } from \"../helpers/imgSignatures\";\r\nimport { stringLengthRange, isAplhaNumeric, isNumeric } from \"../helpers/stringValidator\";\r\nimport yaadcontract from '../contracts/yaad.json';\r\nimport nftcontract from '../contracts/the_yaad.sol';\r\nimport { DaInput, BoxTitle, Buttonz } from '../components/form/formcomps';\r\nimport { LoadingBox, showLoading, hideLoading } from \"../components/ui/loading\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SingleNft (props){    \r\n    const defaultErrorStack = { intervalId:null, formdata:[], substate:null };\r\n    const { state, setState } = useContext( StateContext );\r\n    const { msgStacks, setMsgStacks } = useContext( MsgContext );\r\n    \r\n    const handlesingleUpload = async (e)=>{\r\n        showLoading(e);\r\n        if( e.target.files.length === 0 ) { setMsgStacks((prev)=>({...prev, messages:[\"No file selected!\"] })); return hideLoading(); }\r\n        \r\n        const file = e.target.files[0];\r\n        getFileExtension( file, ( [ dataURL, file_ext ] )=>{\r\n            if ( file_ext.toLowerCase().match(/(png|jpg|jpeg|gif|mp3|mp4|svg|mov|webp|webm|mpg|avi|ogg|wmv|bmp|tiff)$/) ){\r\n                console.log(`file extension: ${file_ext}`);\r\n                setState((prev)=>({...prev, data:{ ...prev.data, path:dataURL, ext:file_ext }}));\r\n                return hideLoading(e);\r\n            }\r\n\r\n            dataURL = null;\r\n            setMsgStacks((prev)=>({...prev, messages:['File type not allowed!, \\nSupported file types: png, jpg, jpeg, gif, mp3, mp4, svg, mov, webp, webm, mpg, avi, ogg, wmv, bmp, tiff.']}));\r\n            return hideLoading(e);\r\n        });\r\n    };\r\n\r\n    const handleTextInputChanges = async (e)=>{\r\n        const ele = e.target;\r\n        const eleValue = ele.value;\r\n        if( eleValue === \"\" ) return;\r\n        switch ( e.target.getAttribute('name') ) {\r\n            case 'name':\r\n                state.data.name = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.name;\r\n                ele.value = state.data.name;\r\n                break;\r\n            case 'collection':\r\n                state.data.collection = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.collection;\r\n                ele.value = state.data.collection;\r\n                break;\r\n            case 'price':\r\n                state.data.price = ( isNumeric( eleValue ) )?eleValue:state.data.price;\r\n                ele.value = state.data.price;\r\n                break;\r\n            case 'royalties':\r\n                state.data.royalties = ( isNumeric( eleValue ) )?eleValue:state.data.royalties;\r\n                ele.value = state.data.royalties;\r\n                break;\r\n            case 'desc':\r\n                state.data.description = ( stringLengthRange( eleValue, 0, 200 ) )?eleValue:state.data.description;\r\n                ele.value = state.data.description;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return;\r\n    };\r\n\r\n    const createNFT = async (e)=>{\r\n        showLoading(e); e.preventDefault();\r\n        let messages = [];\r\n\r\n        if ( !state.data?.path ){\r\n            messages.push(\"Upload an NFT file!\")\r\n        }\r\n\r\n        if( !state.data?.name || !stringLengthRange( state.data?.name, 3, 50 ) || !isAplhaNumeric(state.data?.name, ['.','_',[' ']]) ){\r\n            messages.push(\"Name must be at least 3 characters long & only letters numbers, spaces, periods, and undescores allowed!\");\r\n        }\r\n        \r\n        if( state.data?.description ){\r\n            if(state.data?.description === \"\" || !stringLengthRange( state.data?.description, 20, 200 )) messages.push(\"Description must be at least 20 characters long!\");\r\n        }\r\n\r\n        if( state.data.collection ){\r\n            if(!stringLengthRange( state.data?.collection, 4, 50 )) messages.push(\"Collection name must be at least 4 characters long!\");\r\n        }\r\n\r\n        const conntd = await currentAddress();\r\n        if( conntd.code ){\r\n            messages.push( conntd.code );\r\n        }\r\n\r\n        if( messages.length > 0 ){\r\n            setMsgStacks((prev)=>({...prev, messages, substate:state.currsubState}));\r\n            return hideLoading(e);\r\n        }\r\n\r\n        console.log(conntd);\r\n\r\n        const options = {\r\n            pinataMetadata:{\r\n            name: `${ state.data.name }`,\r\n            keyvalues: {\r\n                description: `nft generated by Yaad labs.`,\r\n                name: `${state.data.name}`\r\n            }\r\n            },\r\n            pinataOptions: {\r\n                cidVersion: 0\r\n            }\r\n        };\r\n\r\n        const fileBLOB = await base64ToBlob( state.data.path );\r\n        \r\n        let assetName = conntd+\"__\"+Date.now()+\".\";\r\n        let pin_body = new FormData();\r\n        // const newimgBlob = await base64ToBlob(imgURLFromBase64String(layers[indx].traits[pin].path));\r\n        pin_body.append( 'img', fileBLOB, assetName );\r\n        pin_body.append( 'the_options', JSON.stringify( options ) );\r\n\r\n        const pinNFT = await fetch(state.baseServerUri+\"pinnit\",{method:\"POST\", })\r\n        let body = new FormData();\r\n        body.append('data', JSON.stringify( state.data) );\r\n        const createNft = await fetch(state.baseServerUri+\"createone\", { method:\"POST\", body}).then((res)=> res.json()).then( (piss)=> piss );\r\n        \r\n        if(createNft.error){\r\n            if(createNft.error.message === \"duplicate\"){\r\n                hideLoading();\r\n                return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"This NFT already exists, please select an original design.\" }], substate:state.currsubState }));\r\n            }\r\n            hideLoading();\r\n            setState( (prev)=>( {...prev, currsubState: \"SingleNFTDetailsForm\" } ));                \r\n        }\r\n        \r\n        if( createNft.results ){\r\n            const minted = await mintNFT( createNft.results.IpfsHash ).finally((resp)=>resp);\r\n            if( minted.code === \"ACTION_REJECTED\" ){\r\n                hideLoading();\r\n                e.target.classList.remove('inactive');\r\n                return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"Transaction rejected!\" }], substate:state.currsubState }));\r\n            }\r\n            console.log(`minted----- ${JSON.stringify(minted)}`);\r\n            if(minted.hash){\r\n                return setState( (prev)=>( {...prev, currsubState: \"NFTminted\" } ));\r\n            }\r\n            \r\n            e.target.classList.remove('inactive'); hideLoading();\r\n        }\r\n    };\r\n\r\n    function SingleNFTDetailsForm (props){\r\n        return(\r\n            <>\r\n                <label className='popupBoxEleDetailsLabel' id='createSingleBoxPreview' htmlFor=\"createSingleAssetUpld\" onClick={ ()=>{ document.querySelector('#single_asset').click() } }>\r\n                    <div className='popupBoxEleDetails' style={{padding:( state.data?.path )?'0px':'30px', boxSizing:'border-box'}}> <img src={( state.data?.path )? `data:image/${state.data?.ext};base64,${state.data?.path}`:'uploadimg.svg' } style={{objectFit:\"cover\", height: \"100%\", width:\"100%\"}} alt=\"\"/> </div>\r\n                </label>\r\n                <input type=\"file\" id='single_asset' name='single_asset' style={{opacity:100, zIndex:1}} onChange={handlesingleUpload} hidden/>\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.name )?state.data?.name:'Name' } type=\"text\" name='name' id='singleNFTName' onChange={ handleTextInputChanges } onClick={(e)=>e.target.value = (!state.data.name)?\"\":state.data.name } style={ {opacity:100, zIndex:1 } } />\r\n                <DaInput data={{ typeId:'singleNFTDesc', typeClass:'popupBoxTextAreaEle', name:'desc', placeholder:( state.data?.description )?state.data?.description:'Description', type:'textarea', onChange:handleTextInputChanges } } />\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.collection )?state.data?.collection:'Collection' } type=\"text\" name='collection' id='singleNFTColl' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                <div style={{ flexDirection:\"row\", maxWidth:'600px', width: '100%', margin: '0px auto' }}>\r\n                    <input className='popupBoxSmallTextAreaLeftEle' placeholder={ ( state.data?.price )?state.data?.price:'Price' } type=\"number\" name='price' id='singleNFTPrice' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                    <input className='popupBoxSmallTextAreaRightEle' placeholder={ ( state.data?.royalties )?state.data?.royalties:'Royalties: max 50%' } type=\"number\" name='royalties' id='singleNFTRoyalty' onChange={handleTextInputChanges} style={{opacity:100, zIndex:1}} />\r\n                </div>\r\n                <Buttonz data={ { class:\"popupBoxEle\", id:'createBox', value:'create', func:createNFT } } />\r\n            </>\r\n        )\r\n            \r\n    };\r\n\r\n    // let singleNFTDetailsForm = (state.currsubState === \"SingleNFTDetailsForm\")?<SingleNFTDetailsForm/>:\"\";\r\n    return (\r\n        <div className='popupdark'>\r\n            <div className='popupBox'> \r\n                <button className='closeBoxWhite' onClick={()=> setState((prev)=>({...prev, state:\"home\", data:{ coll_name : null, coll_symbol : null, layers:[] }, currsubState:null })) } >X</button>\r\n                <SingleNFTDetailsForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleNft;"],"names":["props","useContext","StateContext","state","setState","MsgContext","setMsgStacks","msgStacks","handlesingleUpload","e","showLoading","target","files","length","prev","messages","hideLoading","file","getFileExtension","dataURL","file_ext","toLowerCase","match","console","log","data","path","ext","handleTextInputChanges","ele","eleValue","value","getAttribute","name","stringLengthRange","isAplhaNumeric","collection","price","isNumeric","royalties","description","createNFT","preventDefault","push","currentAddress","conntd","code","substate","currsubState","options","pinataMetadata","keyvalues","pinataOptions","cidVersion","base64ToBlob","fileBLOB","assetName","Date","now","pin_body","FormData","append","JSON","stringify","fetch","baseServerUri","method","body","then","res","json","piss","createNft","error","message","formdata","id","msg","results","mintNFT","IpfsHash","finally","resp","minted","classList","remove","hash","SingleNFTDetailsForm","className","htmlFor","onClick","document","querySelector","click","style","padding","boxSizing","src","objectFit","height","width","alt","type","opacity","zIndex","onChange","hidden","placeholder","typeId","typeClass","flexDirection","maxWidth","margin","class","func","coll_name","coll_symbol","layers"],"sourceRoot":""}
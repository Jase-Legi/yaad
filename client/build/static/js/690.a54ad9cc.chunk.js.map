{"version":3,"file":"static/js/690.a54ad9cc.chunk.js","mappings":"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","sources":["components/ui/sideBar.js","helpers/domHandlers.js"],"sourcesContent":["import { useState, useContext } from 'react';\r\nimport { StateContext } from '../../context/StateContext';\r\nimport { MsgContext } from '../../context/msgcontext';\r\nimport { showLoading, hideLoading } from '../ui/loading';\r\nimport { connectToChain, blockchainNetworks, currentAddress } from '../../helpers/web3Helpers';\r\nimport { expandABox } from '../../helpers/domHandlers';\r\nimport '../../styles/sideBar.css';\r\n\r\nconst WalletBox = ( )=>{\r\n    const { state, setState } = useContext( StateContext );\r\n    const { msgStacks, setMsgStacks } = useContext( MsgContext );\r\n    let activeChain, inactiveChain = [];\r\n    let [ networkSelected, setNetworkSelected ] = useState( { status: false, index: null } );\r\n    let daBalance = state.ethBalance, activNetwrkIndx = null;\r\n    \r\n    const setChain = async ( e, chosenNetwork, index )=>{\r\n        showLoading();\r\n        \r\n        const walletConnected = await connectToChain( chosenNetwork );\r\n        if ( walletConnected.code ){\r\n            hideLoading();\r\n            return setMsgStacks((prev)=>({...prev, messages:[\"Please confirm wallet connection to continue!\"], substate:state.currsubState }) );\r\n        }\r\n\r\n        setNetworkSelected((prev)=>({...prev, status:true, index, }));\r\n        hideLoading();\r\n        return setState((prev)=>({...prev, chainData:chosenNetwork, }));\r\n    }\r\n    \r\n    const connectWallet = async ( e )=>{\r\n        showLoading(e)\r\n        const account = await currentAddress();\r\n        if( account.code ){\r\n            console.log(`error ${JSON.stringify(account)}!`);\r\n            hideLoading(e);\r\n            return setMsgStacks((prev)=>({...prev, messages:( account.code === 4001 )?[\"You rejected connection, please confirm wallet connection to continue!\"]:[\"An error occurred while attempting to connect wallet, please try again!\"]}) );\r\n        }\r\n\r\n        hideLoading(e)\r\n        return setState((prev)=>({...prev, state:( state.newState )?prev.newState:\"home\", newState:null, oldState:null, account, }));\r\n    }\r\n\r\n    blockchainNetworks.forEach( ( element, i ) => {\r\n        if( state.chainID === element.networkParameters.chainId ){\r\n            activNetwrkIndx = i;\r\n            activeChain = <div className='currentChain' key={i} onClick={ (e)=>{ expandABox( null, document.getElementById('inactiveNetworks'), 'expandedInactiveNetworks', 'inactiveNetworks' ) } } >\r\n                <img src={(blockchainNetworks[i].logo)?blockchainNetworks[i].logo:'solidity_icon.svg'} alt='' style={{ height:'35px', width:'35px', borderRadius:'7.5px' }} />\r\n                <span> { blockchainNetworks[i].name } </span>\r\n                <img src='./inverted-triangle.svg' style={{ height:'15px', width:'15px', margin:'auto 0px auto auto' }} alt='' />\r\n            </div>\r\n        }else{\r\n            inactiveChain.push(\r\n                <div className='inactiveChains' key={i} onClick={ (e)=>{ if( networkSelected.index === i ){ return setNetworkSelected((prev)=>( {...prev, status:false, index:null } )); } return setChain( e, blockchainNetworks[i], i ); } } >\r\n                    <img src={(blockchainNetworks[i].logo)?blockchainNetworks[i].logo:'solidity_icon.svg'} alt='' />\r\n                    <span> { blockchainNetworks[i].name } </span>\r\n                </div>\r\n            )\r\n        }\r\n    });\r\n    \r\n    if( state.account !== null && state.sideBar === true ){\r\n        return(\r\n            <div id='sideBarpopup'>\r\n                <div className='sideBar'>\r\n                    <button className='closeSideBar' onClick={()=>{ return setState((prev)=>({...prev, sideBar:!state.sideBar })) }} >X</button>\r\n                    <div className='currentNetwork'>\r\n                        <span>Current Network:</span>\r\n                        {activeChain}\r\n                        <div id='inactiveNetworks' className='inactiveNetworks'> {inactiveChain} </div>\r\n                        <span>Address:</span>\r\n                        <div style={{fontSize:'9px', width:'100%', padding:'10px',margin:'10px 0px', border:'solid 1px rgb( 52, 52, 52 )', display:'flex', verticalAlign:'middle', flexDirection:'row', overflow:'hidden', borderRadius:'10px', boxSizing:'border-box'}}> <div style={{width:'calc( 100% - 35px )', display:'inline-block', boxSizing:'border-box', overflowX:'hidden', margin:'0px'}}> <span> {state.account} </span> </div> <span style={{ margin:'auto', textAlign:'right', color:'rgb( 120, 120, 120 )', fontWeight:'bold', cursor:'pointer' }} onClick={(e)=>navigator.clipboard.writeText(state.account)} > copy</span> </div>\r\n                        <div style={{padding:'10px', boxSizing:'border-box', width:'100% !important', border:'solid 1px rgb( 52, 52, 52 )', borderRadius:'10px', margin:'10px 0px', overflow:'hidden'}}>Balance: {daBalance.split('.')[0]+'.'+daBalance.split('.')[1].substring(0, 2)+blockchainNetworks[activNetwrkIndx].networkParameters.nativeCurrency.symbol}</div>\r\n                    </div>\r\n                    <div className='walletOptions'>\r\n  \r\n                        {/* <div className='currentChain' onClick={(e)=>( networkSelected.status )? connectWallet():false}>\r\n                            <img src='./metamask.svg' alt='' style={{ height:'35px', width:'35px', borderRadius:'7.5px' }}/>\r\n                            <span>Metamask Wallet</span>\r\n                        </div>\r\n                        <div className='currentChain'>\r\n                            <img src='./bravelogo.svg' alt='' style={{ height:'35px', width:'35px', borderRadius:'7.5px' }}/>\r\n                            <span>Brave Browser</span>\r\n                        </div>\r\n                        <div className='currentChain'>\r\n                            <img src='./walletconnect.svg' alt='' style={{ height:'35px', width:'35px', borderRadius:'7.5px' }}/>\r\n                            <span>Wallet Connect</span>\r\n                        </div> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WalletBox;","const expandABox  = ( e, expandee, expandedClass, contractedClass )=>{\r\n    // element that calls the click event should be a button or element containing inner text\r\n    let ele = (e)?e.target:null;\r\n\r\n    // Check if div to be expanded is already expanded via a css class\r\n    // If it is expanded then swap class for a contracted css class ( which in this case is overflowY set to 'hidden' )\r\n    if ( expandee.classList.contains( expandedClass ) ) {\r\n        expandee.classList.remove( expandedClass );\r\n        expandee.classList.add( contractedClass ); // 'contract-container');\r\n        if( ele )\r\n            ele.innerText = \"expand\"\r\n    }else{\r\n        // If element contains contracted class instead then toggle it and replace it for expanded class\r\n        expandee.classList.add( expandedClass );\r\n        expandee.classList.remove( contractedClass );\r\n        if(ele)\r\n            ele.innerText = \"less\"\r\n    }\r\n};\r\n\r\nconst divSwapper = (node1, node2)=>{\r\n    node1.parentNode.replaceChild(node1, node2);\r\n    node1.parentNode.insertBefore(node2, node1); \r\n}\r\n\r\nexport { expandABox, divSwapper }"],"names":["activeChain","useContext","StateContext","state","setState","MsgContext","setMsgStacks","msgStacks","inactiveChain","useState","status","index","networkSelected","setNetworkSelected","daBalance","ethBalance","activNetwrkIndx","setChain","e","chosenNetwork","showLoading","connectToChain","code","hideLoading","prev","messages","substate","currsubState","chainData","blockchainNetworks","element","i","chainID","networkParameters","chainId","className","onClick","expandABox","document","getElementById","src","logo","alt","style","height","width","borderRadius","name","margin","push","account","sideBar","id","fontSize","padding","border","display","verticalAlign","flexDirection","overflow","boxSizing","overflowX","textAlign","color","fontWeight","cursor","navigator","clipboard","writeText","split","substring","nativeCurrency","symbol","expandee","expandedClass","contractedClass","ele","target","classList","contains","remove","add","innerText","divSwapper","node1","node2","parentNode","replaceChild","insertBefore"],"sourceRoot":""}
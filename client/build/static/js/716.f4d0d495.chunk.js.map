{"version":3,"file":"static/js/716.f4d0d495.chunk.js","mappings":"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","sources":["pages/singleNFT.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { StateContext } from '../context/StateContext';\r\nimport { MsgContext } from '../context/msgcontext';\r\n// import { BigNumber } from \"ethers\";\r\nimport { imgToBase64String, imgURLFromBase64String, base64ToBlob } from \"../helpers/imgBLOBto64\";\r\nimport { connectToChain, currentAddress, signer,  currentNetwork, oldNetwork, mintNFT, blockchainNetworks } from \"../helpers/web3Helpers\";\r\nimport { validateIMGtype } from \"../helpers/imgdatahelpers\";\r\nimport { imgSignature } from \"../helpers/imgSignatures\";\r\nimport { stringLengthRange, isAplhaNumeric, isNumeric } from \"../helpers/stringValidator\";\r\nimport yaadcontract from '../contracts/yaad.json';\r\nimport nftcontract from '../contracts/the_yaad.sol';\r\nimport { DaInput, BoxTitle, Buttonz } from '../components/form/formcomps';\r\nimport { LoadingBox, showLoading, hideLoading } from \"../components/ui/loading\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SingleNft (props){    \r\n    const defaultErrorStack = { intervalId:null, formdata:[], substate:null };\r\n    const { state, setState } = useContext( StateContext );\r\n    const { msgStacks, setMsgStacks } = useContext( MsgContext );\r\n    \r\n    const handlesingleUpload = async (e)=>{\r\n        showLoading();\r\n        let fileLoaded = 0;\r\n        if( e.target.files.length === 0 ) { setMsgStacks((prev)=>({...prev, messages:[\"No file selected!\"] })); return hideLoading(); }\r\n        // imgSignature(e.target.files[0], (fl)=>{\r\n        //     console.log(`file signature: ${fl}`);\r\n        // });\r\n\r\n        const file = e.target.files[0];\r\n\r\n        const readr = new FileReader();\r\n        \r\n        readr.addEventListener(\"load\", ()=>{\r\n            fileLoaded++;\r\n            if ( fileLoaded === 1 ){\r\n                setState((prev)=>({...prev, data:{ ...prev.data, path:readr.result}}));\r\n                return hideLoading();\r\n            }\r\n        });\r\n        readr.readAsDataURL(file);\r\n        // hideLoading();\r\n    };\r\n\r\n    const handleTextInputChanges = async (e)=>{\r\n        const ele = e.target;\r\n        const eleValue = ele.value;\r\n        if( eleValue === \"\" ) return;\r\n        switch ( e.target.getAttribute('name') ) {\r\n            case 'name':\r\n                state.data.name = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.name;\r\n                ele.value = state.data.name;\r\n                break;\r\n            case 'collection':\r\n                state.data.collection = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.collection;\r\n                ele.value = state.data.collection;\r\n                break;\r\n            case 'price':\r\n                state.data.price = ( isNumeric( eleValue ) )?eleValue:state.data.price;\r\n                ele.value = state.data.price;\r\n                break;\r\n            case 'royalties':\r\n                state.data.royalties = ( isNumeric( eleValue ) )?eleValue:state.data.royalties;\r\n                ele.value = state.data.royalties;\r\n                break;\r\n            case 'desc':\r\n                state.data.description = ( stringLengthRange( eleValue, 0, 200 ) )?eleValue:state.data.description;\r\n                ele.value = state.data.description;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return;\r\n    };\r\n\r\n    function SingleNFTDetailsForm (props){\r\n        const handlesingleCreate = async (e)=>{\r\n            showLoading(e); \r\n            e.preventDefault();\r\n            if( !stringLengthRange( state.data?.name, 3, 50 ) || !isAplhaNumeric(state.data?.name) || ( stringLengthRange( state.data.description, 0, 200 ) ) || ( stringLengthRange( state.data.collection, 0, 50 ))){\r\n                setMsgStacks( (prev)=>({...prev, messages:[ \"Name must be at least 3 characters long!\" ], substate:state.currsubState }));\r\n                return hideLoading(e);\r\n            }\r\n            \r\n            let body = new FormData();\r\n            body.append('data', JSON.stringify(state.data) );\r\n            const createNft = await fetch(state.baseServerUri+\"createone\", { method:\"POST\", body,}).then((res)=> res.json()).then( (piss)=> piss );\r\n            \r\n            if(createNft.error){\r\n                if(createNft.error.message === \"duplicate\"){\r\n                    hideLoading();\r\n                    return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"This NFT already exists, please select an original design.\" }], substate:state.currsubState }));\r\n                }\r\n                hideLoading();\r\n                setState( (prev)=>( {...prev, currsubState: \"SingleNFTDetailsForm\" } ));                \r\n            }\r\n            \r\n            if( createNft.results ){\r\n                const minted = await mintNFT( createNft.results.IpfsHash ).finally((resp)=>resp);\r\n                if( minted.code === \"ACTION_REJECTED\" ){\r\n                    hideLoading();\r\n                    e.target.classList.remove('inactive');\r\n                    return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"Transaction rejected!\" }], substate:state.currsubState }));\r\n                }\r\n                console.log(`minted----- ${JSON.stringify(minted)}`);\r\n                if(minted.hash){\r\n                    return setState( (prev)=>( {...prev, currsubState: \"NFTminted\" } ));\r\n                }\r\n                \r\n                e.target.classList.remove('inactive'); hideLoading();\r\n            }\r\n        };\r\n        \r\n        return(\r\n            <>\r\n                <label className='popupBoxEleDetailsLabel' id='createSingleBoxPreview' htmlFor=\"createSingleAssetUpld\" onClick={ ()=>{ document.querySelector('#single_asset').click() } }>\r\n                    <div className='popupBoxEleDetails' style={{padding:( state.data?.path )?'0px':'30px', boxSizing:'border-box'}}> <img src={( state.data?.path )? state.data?.path:'uploadimg.svg' } style={{objectFit:\"cover\", height: \"100%\", width:\"100%\"}} alt=\"\"/> </div>\r\n                </label>\r\n                <input type=\"file\" id='single_asset' name='single_asset' accept=\"image/*,video/*,audio/*,webgl/*,.glb,.gltf\" style={{opacity:100, zIndex:1}} onChange={handlesingleUpload} hidden/>\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.name )?state.data?.name:'Name' } type=\"text\" name='name' id='singleNFTName' onChange={ handleTextInputChanges } onClick={(e)=>e.target.value = (!state.data.name)?\"\":state.data.name } style={ {opacity:100, zIndex:1 } } />\r\n                <DaInput data={{ typeId:'singleNFTDesc', typeClass:'popupBoxTextAreaEle', name:'desc', placeholder:( state.data?.description )?state.data?.description:'Description', type:'textarea', onChange:handleTextInputChanges } } />\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.collection )?state.data?.collection:'Collection' } type=\"text\" name='collection' id='singleNFTColl' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                <div style={{ flexDirection:\"row\", maxWidth:'600px', width: '100%', margin: '0px auto' }}>\r\n                    <input className='popupBoxSmallTextAreaLeftEle' placeholder={ ( state.data?.price )?state.data?.price:'Price' } type=\"number\" name='price' id='singleNFTPrice' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                    <input className='popupBoxSmallTextAreaRightEle' placeholder={ ( state.data?.royalties )?state.data?.royalties:'Royalties: max 50%' } type=\"number\" name='royalties' id='singleNFTRoyalty' onChange={handleTextInputChanges} style={{opacity:100, zIndex:1}} />\r\n                </div>\r\n                <Buttonz data={ { class:\"popupBoxEle\", id:'createBox', value:'create', func:handlesingleCreate } } />\r\n            </>\r\n        )\r\n            \r\n    };\r\n\r\n    // let singleNFTDetailsForm = (state.currsubState === \"SingleNFTDetailsForm\")?<SingleNFTDetailsForm/>:\"\";\r\n    return (\r\n        <div className='popupdark'>\r\n            <div className='popupBox'> \r\n                <button className='closeBoxWhite' onClick={()=> setState((prev)=>({...prev, state:\"home\", data:{ coll_name : null, coll_symbol : null, layers:[] }, currsubState:null })) } >X</button>\r\n                <SingleNFTDetailsForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleNft;"],"names":["props","useContext","StateContext","state","setState","MsgContext","setMsgStacks","msgStacks","handlesingleUpload","e","showLoading","fileLoaded","target","files","length","prev","messages","hideLoading","file","readr","FileReader","addEventListener","data","path","result","readAsDataURL","handleTextInputChanges","ele","eleValue","value","getAttribute","name","stringLengthRange","isAplhaNumeric","collection","price","isNumeric","royalties","description","SingleNFTDetailsForm","handlesingleCreate","preventDefault","substate","currsubState","body","FormData","append","JSON","stringify","fetch","baseServerUri","method","then","res","json","piss","createNft","error","message","formdata","id","msg","results","mintNFT","IpfsHash","finally","resp","minted","code","classList","remove","console","log","hash","className","htmlFor","onClick","document","querySelector","click","style","padding","boxSizing","src","objectFit","height","width","alt","type","accept","opacity","zIndex","onChange","hidden","placeholder","typeId","typeClass","flexDirection","maxWidth","margin","class","func","coll_name","coll_symbol","layers"],"sourceRoot":""}
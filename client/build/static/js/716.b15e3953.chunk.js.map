{"version":3,"file":"static/js/716.b15e3953.chunk.js","mappings":"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","sources":["pages/singleNFT.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { StateContext } from '../context/StateContext';\r\nimport { MsgContext } from '../context/msgcontext';\r\n// import { BigNumber } from \"ethers\";\r\nimport { imgToBase64String, imgURLFromBase64String, base64ToBlob } from \"../helpers/imgBLOBto64\";\r\nimport { connectToChain, currentAddress, signer,  currentNetwork, oldNetwork, mintNFT, blockchainNetworks } from \"../helpers/web3Helpers\";\r\nimport { validateIMGtype } from \"../helpers/imgdatahelpers\";\r\nimport { imgSignature, getFileExtension } from \"../helpers/imgSignatures\";\r\nimport { stringLengthRange, isAplhaNumeric, isNumeric } from \"../helpers/stringValidator\";\r\nimport yaadcontract from '../contracts/yaad.json';\r\nimport nftcontract from '../contracts/the_yaad.sol';\r\nimport { DaInput, BoxTitle, Buttonz } from '../components/form/formcomps';\r\nimport { LoadingBox, showLoading, hideLoading } from \"../components/ui/loading\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SingleNft (props){    \r\n    const defaultErrorStack = { intervalId:null, formdata:[], substate:null };\r\n    const { state, setState } = useContext( StateContext );\r\n    const { msgStacks, setMsgStacks } = useContext( MsgContext );\r\n    \r\n    const handlesingleUpload = async (e)=>{\r\n        showLoading(e);\r\n        if( e.target.files.length === 0 ) { setMsgStacks((prev)=>({...prev, messages:[\"No file selected!\"] })); return hideLoading(); }\r\n        \r\n        const file = e.target.files[0];\r\n        getFileExtension( file, ( [ dataURL, file_ext ] )=>{\r\n            if ( file_ext.toLowerCase().match(/(png|jpg|jpeg|gif|mp3|mp4|svg|mov|webp|webm|mpg|avi|ogg|wmv|bmp|tiff)$/) ){\r\n                console.log(`file extension: ${file_ext}`);\r\n                setState((prev)=>({...prev, data:{ ...prev.data, path:dataURL, ext:file_ext }}));\r\n                return hideLoading(e);\r\n            }\r\n\r\n            dataURL = null;\r\n            setMsgStacks((prev)=>({...prev, messages:['File type not allowed!, \\nSupported file types: png, jpg, jpeg, gif, mp3, mp4, svg, mov, webp, webm, mpg, avi, ogg, wmv, bmp, tiff.']}));\r\n            return hideLoading(e);\r\n        });\r\n    };\r\n\r\n    const handleTextInputChanges = async (e)=>{\r\n        const ele = e.target;\r\n        const eleValue = ele.value;\r\n        if( eleValue === \"\" ) return;\r\n        switch ( e.target.getAttribute('name') ) {\r\n            case 'name':\r\n                state.data.name = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.name;\r\n                ele.value = state.data.name;\r\n                break;\r\n            case 'collection':\r\n                state.data.collection = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.collection;\r\n                ele.value = state.data.collection;\r\n                break;\r\n            case 'price':\r\n                state.data.price = ( isNumeric( eleValue ) )?eleValue:state.data.price;\r\n                ele.value = state.data.price;\r\n                break;\r\n            case 'royalties':\r\n                state.data.royalties = ( isNumeric( eleValue ) )?eleValue:state.data.royalties;\r\n                ele.value = state.data.royalties;\r\n                break;\r\n            case 'desc':\r\n                state.data.description = ( stringLengthRange( eleValue, 0, 200 ) )?eleValue:state.data.description;\r\n                ele.value = state.data.description;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return;\r\n    };\r\n\r\n    const createNFT = async (e)=>{\r\n        showLoading(e); e.preventDefault();\r\n        let messages = [];\r\n\r\n        if ( !state.data?.path ){\r\n            messages.push(\"Upload an NFT file!\")\r\n        }\r\n\r\n        if( !state.data?.name || !stringLengthRange( state.data?.name, 3, 50 ) || !isAplhaNumeric(state.data?.name, ['.','_',[' ']]) ){\r\n            messages.push(\"Name must be at least 3 characters long & only letters numbers, spaces, periods, and undescores allowed!\");\r\n        }\r\n        \r\n        if( state.data?.description ){\r\n            if(state.data?.description === \"\" || !stringLengthRange( state.data?.description, 20, 200 )) messages.push(\"Description must be at least 20 characters long!\");\r\n        }\r\n\r\n        if( state.data.collection ){\r\n            if(!stringLengthRange( state.data?.collection, 4, 50 )) messages.push(\"Collection name must be at least 4 characters long!\");\r\n        }\r\n\r\n        const conntd = await currentAddress();\r\n        if( conntd.code ){\r\n            messages.push( conntd.code );\r\n        }\r\n\r\n        if( messages.length > 0 ){\r\n            setMsgStacks((prev)=>({...prev, messages, substate:state.currsubState}));\r\n            return hideLoading(e);\r\n        }\r\n\r\n        console.log(conntd);\r\n\r\n        const options = {\r\n            pinataMetadata:{\r\n            name: `${ state.data.name }`,\r\n            keyvalues: {\r\n                description: `nft generated by Yaad labs.`,\r\n                name: `${state.data.name}`\r\n            }\r\n            },\r\n            pinataOptions: {\r\n                cidVersion: 0\r\n            }\r\n        };\r\n\r\n        const fileBLOB = await base64ToBlob( state.data.path );\r\n        \r\n        let assetName = conntd+\"__\"+Date.now()+\".\";\r\n        let pin_body = new FormData();\r\n        // const newimgBlob = await base64ToBlob(imgURLFromBase64String(layers[indx].traits[pin].path));\r\n        pin_body.append( 'img', fileBLOB, assetName );\r\n        pin_body.append( 'the_options', JSON.stringify( options ) );\r\n\r\n        const pinNFT = await fetch(state.baseServerUri+\"pinnit\",{method:\"POST\", })\r\n        let body = new FormData();\r\n        body.append('data', JSON.stringify( state.data) );\r\n        const createNft = await fetch(state.baseServerUri+\"createone\", { method:\"POST\", body}).then((res)=> res.json()).then( (piss)=> piss );\r\n        \r\n        if(createNft.error){\r\n            if(createNft.error.message === \"duplicate\"){\r\n                hideLoading();\r\n                return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"This NFT already exists, please select an original design.\" }], substate:state.currsubState }));\r\n            }\r\n            hideLoading();\r\n            setState( (prev)=>( {...prev, currsubState: \"SingleNFTDetailsForm\" } ));                \r\n        }\r\n        \r\n        if( createNft.results ){\r\n            const minted = await mintNFT( createNft.results.IpfsHash ).finally((resp)=>resp);\r\n            if( minted.code === \"ACTION_REJECTED\" ){\r\n                hideLoading();\r\n                e.target.classList.remove('inactive');\r\n                return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"Transaction rejected!\" }], substate:state.currsubState }));\r\n            }\r\n            console.log(`minted----- ${JSON.stringify(minted)}`);\r\n            if(minted.hash){\r\n                return setState( (prev)=>( {...prev, currsubState: \"NFTminted\" } ));\r\n            }\r\n            \r\n            e.target.classList.remove('inactive'); hideLoading();\r\n        }\r\n    };\r\n\r\n    function SingleNFTDetailsForm (props){\r\n        return(\r\n            <>\r\n                {/* <label className='popupBoxEleDetailsLabel' id='createSingleBoxPreview' htmlFor=\"createSingleAssetUpld\" onClick={ ()=>{ document.querySelector('#single_asset').click() } }>\r\n                    <div className='popupBoxEleDetails' style={{padding:( state.data?.path )?'0px':'30px', boxSizing:'border-box'}}> <img src={( state.data?.path )? `data:image/${state.data?.ext};base64,${state.data?.path}`:'uploadimg.svg' } style={{objectFit:\"cover\", height: \"100%\", width:\"100%\"}} alt=\"\"/> </div>\r\n                </label> */}\r\n                <input type=\"file\" id='single_asset' name='single_asset' style={{opacity:100, zIndex:1}} onChange={handlesingleUpload} hidden/>\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.name )?state.data?.name:'Name' } type=\"text\" name='name' id='singleNFTName' onChange={ handleTextInputChanges } onClick={(e)=>e.target.value = (!state.data.name)?\"\":state.data.name } style={ {opacity:100, zIndex:1 } } />\r\n                <DaInput data={{ typeId:'singleNFTDesc', typeClass:'popupBoxTextAreaEle', name:'desc', placeholder:( state.data?.description )?state.data?.description:'Job Title', type:'textarea', onChange:handleTextInputChanges } } />\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.collection )?state.data?.collection:'Sill Level Required' } type=\"text\" name='collection' id='singleNFTColl' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                <div style={{ flexDirection:\"row\", maxWidth:'600px', width: '100%', margin: '0px auto' }}>\r\n                    <input className='popupBoxSmallTextAreaLeftEle' placeholder={ ( state.data?.price )?state.data?.price:'Hourly Rate' } type=\"number\" name='price' id='singleNFTPrice' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                    <input className='popupBoxSmallTextAreaRightEle' placeholder={ ( state.data?.royalties )?state.data?.royalties:'Time' } type=\"number\" name='royalties' id='singleNFTRoyalty' onChange={handleTextInputChanges} style={{opacity:100, zIndex:1}} />\r\n                </div>\r\n                <Buttonz data={ { class:\"popupBoxEle\", id:'createBox', value:'create', func:createNFT } } />\r\n            </>\r\n        )\r\n            \r\n    };\r\n\r\n    // let singleNFTDetailsForm = (state.currsubState === \"SingleNFTDetailsForm\")?<SingleNFTDetailsForm/>:\"\";\r\n    return (\r\n            <div className='popupBox'> \r\n                <button className='closeBoxWhite' onClick={()=> setState((prev)=>({...prev, state:\"home\", data:{ coll_name : null, coll_symbol : null, layers:[] }, currsubState:null })) } >X</button>\r\n                <SingleNFTDetailsForm/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SingleNft;"],"names":["props","state","setState","useContext","StateContext","msgStacks","setMsgStacks","MsgContext","handlesingleUpload","async","showLoading","e","target","files","length","prev","messages","hideLoading","file","getFileExtension","dataURL","file_ext","toLowerCase","match","console","log","data","path","ext","handleTextInputChanges","ele","eleValue","value","getAttribute","name","stringLengthRange","isAplhaNumeric","collection","price","isNumeric","royalties","description","createNFT","preventDefault","push","conntd","currentAddress","code","substate","currsubState","options","pinataMetadata","keyvalues","pinataOptions","cidVersion","fileBLOB","base64ToBlob","assetName","Date","now","pin_body","FormData","append","JSON","stringify","fetch","baseServerUri","method","body","createNft","then","res","json","piss","error","message","formdata","id","msg","results","minted","mintNFT","IpfsHash","finally","resp","classList","remove","hash","SingleNFTDetailsForm","type","style","opacity","zIndex","onChange","hidden","className","placeholder","onClick","typeId","typeClass","flexDirection","maxWidth","width","margin","class","func","coll_name","coll_symbol","layers"],"sourceRoot":""}
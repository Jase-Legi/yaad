{"version":3,"file":"static/js/716.e5279481.chunk.js","mappings":"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","sources":["pages/singleNFT.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { StateContext } from '../context/StateContext';\r\nimport { MsgContext } from '../context/msgcontext';\r\n// import { BigNumber } from \"ethers\";\r\nimport { imgToBase64String, imgURLFromBase64String, base64ToBlob } from \"../helpers/imgBLOBto64\";\r\nimport { connectToChain, currentAddress, signer,  currentNetwork, oldNetwork, mintNFT, blockchainNetworks } from \"../helpers/web3Helpers\";\r\nimport { validateIMGtype } from \"../helpers/imgdatahelpers\";\r\nimport { imgSignature } from \"../helpers/imgSignatures\";\r\nimport { stringLengthRange, isAplhaNumeric, isNumeric } from \"../helpers/stringValidator\";\r\nimport yaadcontract from '../contracts/yaad.json';\r\nimport nftcontract from '../contracts/the_yaad.sol';\r\nimport { DaInput, BoxTitle, Buttonz } from '../components/form/formcomps';\r\nimport { LoadingBox, showLoading, hideLoading } from \"../components/ui/loading\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SingleNft (props){    \r\n    const defaultErrorStack = { intervalId:null, formdata:[], substate:null };\r\n    const { state, setState } = useContext( StateContext );\r\n    const { msgStacks, setMsgStacks } = useContext( MsgContext );\r\n    \r\n    const handlesingleUpload = async (e)=>{\r\n        showLoading();\r\n        let fileLoaded = 0;\r\n        if( e.target.files.length === 0 ) { setMsgStacks((prev)=>({...prev, messages:[\"No file selected!\"] })); return hideLoading(); }\r\n        imgSignature(e.target.files[0], (fl)=>{\r\n            console.log(`file signature: ${fl}`);\r\n        });\r\n\r\n        const file = e.target.files[0];\r\n\r\n        const readr = new FileReader();\r\n        \r\n        readr.addEventListener(\"load\", ()=>{\r\n            fileLoaded++;\r\n            // console.log(readr.result);\r\n            if ( fileLoaded === 1 ){\r\n                setState((prev)=>({...prev, data:{ ...prev.data, path:readr.result}}));\r\n                return hideLoading();\r\n            }\r\n        });\r\n        readr.readAsDataURL(file);\r\n        // hideLoading();\r\n    };\r\n\r\n    const handleTextInputChanges = async (e)=>{\r\n        const ele = e.target;\r\n        const eleValue = ele.value;\r\n        if( eleValue === \"\" ) return;\r\n        switch ( e.target.getAttribute('name') ) {\r\n            case 'name':\r\n                state.data.name = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.name;\r\n                ele.value = state.data.name;\r\n                break;\r\n            case 'collection':\r\n                state.data.collection = ( stringLengthRange( eleValue, 0, 50 ) && isAplhaNumeric( eleValue, [ '.', '_', ' ' ]))?eleValue:state.data.collection;\r\n                ele.value = state.data.collection;\r\n                break;\r\n            case 'price':\r\n                state.data.price = ( isNumeric( eleValue ) )?eleValue:state.data.price;\r\n                ele.value = state.data.price;\r\n                break;\r\n            case 'royalties':\r\n                state.data.royalties = ( isNumeric( eleValue ) )?eleValue:state.data.royalties;\r\n                ele.value = state.data.royalties;\r\n                break;\r\n            case 'desc':\r\n                state.data.description = ( stringLengthRange( eleValue, 0, 200 ) )?eleValue:state.data.description;\r\n                ele.value = state.data.description;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return;\r\n    };\r\n\r\n    function SingleNFTDetailsForm (props){\r\n        const handlesingleCreate = async (e)=>{\r\n            showLoading(e); e.preventDefault();\r\n            const signatures = ['89504e47'.toLowerCase(), 'FFD8FFE0'.toLowerCase(), 'FFD8FFE1'.toLowerCase(), 'FFD8FFE2'.toLowerCase(), 'FFD8FFE8'.toLowerCase(), 'FFD8FFDB'.toLowerCase(), 'FFD8FFEE'.toLowerCase(), '25504446'.toLowerCase() ];\r\n\r\n            const strLen = state.data.path.length;\r\n            let pre64String = \"\"\r\n            for (let r = 0; r < strLen; r++) {\r\n                const char = state.data.path[r];\r\n                if ( char !== \";\"){\r\n                    pre64String += char;\r\n                }else{\r\n                    break;\r\n                }       \r\n            }\r\n\r\n            console.log(`pre64String:: ${pre64String}`);\r\n            let messages = [];\r\n\r\n            if ( !state.data?.path ){\r\n                messages.push(\"Upload an NFT file!\")\r\n            }\r\n\r\n            if( !state.data?.name || !stringLengthRange( state.data?.name, 3, 50 ) || !isAplhaNumeric(state.data?.name, ['.','_',[' ']]) ){\r\n                messages.push(\"Name must be at least 3 characters long & only letters numbers, spaces, periods, and undescores allowed!\");\r\n            }\r\n            \r\n            if( state.data?.description ){\r\n                if(state.data?.description === \"\" || !stringLengthRange( state.data?.description, 20, 200 )) messages.push(\"Description must be at least 20 characters long!\");\r\n            }\r\n\r\n            if( state.data.collection ){\r\n                if(!stringLengthRange( state.data?.collection, 4, 50 )) messages.push(\"Collection name must be at least 4 characters long!\");\r\n            }\r\n\r\n            if( messages.length > 0 ){\r\n                setMsgStacks((prev)=>({...prev, messages, substate:state.currsubState}));\r\n                return hideLoading(e);\r\n            }\r\n\r\n            const conntd = await currentAddress();\r\n            console.log(conntd);\r\n\r\n            const options = {\r\n                pinataMetadata:{\r\n                name: `${ state.data.name }`,\r\n                keyvalues: {\r\n                    description: `nft generated by Yaad labs.`,\r\n                    name: `${state.data.name}`\r\n                }\r\n                },\r\n                pinataOptions: {\r\n                    cidVersion: 0\r\n                }\r\n            };\r\n\r\n            const fileBLOB = await base64ToBlob( state.data.path );\r\n            \r\n            let assetName = conntd+\"__\"+Date.now()+\".\";\r\n            let pin_body = new FormData();\r\n            // const newimgBlob = await base64ToBlob(imgURLFromBase64String(layers[indx].traits[pin].path));\r\n            pin_body.append( 'img', fileBLOB, assetName );\r\n            pin_body.append( 'the_options', JSON.stringify( options ) );\r\n\r\n            const pinNFT = await fetch(state.baseServerUri+\"pinnit\",{method:\"POST\", })\r\n            let body = new FormData();\r\n            body.append('data', JSON.stringify( state.data) );\r\n            const createNft = await fetch(state.baseServerUri+\"createone\", { method:\"POST\", body}).then((res)=> res.json()).then( (piss)=> piss );\r\n            \r\n            if(createNft.error){\r\n                if(createNft.error.message === \"duplicate\"){\r\n                    hideLoading();\r\n                    return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"This NFT already exists, please select an original design.\" }], substate:state.currsubState }));\r\n                }\r\n                hideLoading();\r\n                setState( (prev)=>( {...prev, currsubState: \"SingleNFTDetailsForm\" } ));                \r\n            }\r\n            \r\n            if( createNft.results ){\r\n                const minted = await mintNFT( createNft.results.IpfsHash ).finally((resp)=>resp);\r\n                if( minted.code === \"ACTION_REJECTED\" ){\r\n                    hideLoading();\r\n                    e.target.classList.remove('inactive');\r\n                    return setMsgStacks( (prev)=>({...prev, formdata:[{ id:\"createSingleBoxPreview\", value:\"\", msg:\"Transaction rejected!\" }], substate:state.currsubState }));\r\n                }\r\n                console.log(`minted----- ${JSON.stringify(minted)}`);\r\n                if(minted.hash){\r\n                    return setState( (prev)=>( {...prev, currsubState: \"NFTminted\" } ));\r\n                }\r\n                \r\n                e.target.classList.remove('inactive'); hideLoading();\r\n            }\r\n        };\r\n        \r\n        return(\r\n            <>\r\n                <label className='popupBoxEleDetailsLabel' id='createSingleBoxPreview' htmlFor=\"createSingleAssetUpld\" onClick={ ()=>{ document.querySelector('#single_asset').click() } }>\r\n                    <div className='popupBoxEleDetails' style={{padding:( state.data?.path )?'0px':'30px', boxSizing:'border-box'}}> <img src={( state.data?.path )? state.data?.path:'uploadimg.svg' } style={{objectFit:\"cover\", height: \"100%\", width:\"100%\"}} alt=\"\"/> </div>\r\n                </label>\r\n                <input type=\"file\" id='single_asset' name='single_asset' style={{opacity:100, zIndex:1}} onChange={handlesingleUpload} hidden/>\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.name )?state.data?.name:'Name' } type=\"text\" name='name' id='singleNFTName' onChange={ handleTextInputChanges } onClick={(e)=>e.target.value = (!state.data.name)?\"\":state.data.name } style={ {opacity:100, zIndex:1 } } />\r\n                <DaInput data={{ typeId:'singleNFTDesc', typeClass:'popupBoxTextAreaEle', name:'desc', placeholder:( state.data?.description )?state.data?.description:'Description', type:'textarea', onChange:handleTextInputChanges } } />\r\n                <input className='popupBoxTextEle' placeholder={ ( state.data?.collection )?state.data?.collection:'Collection' } type=\"text\" name='collection' id='singleNFTColl' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                <div style={{ flexDirection:\"row\", maxWidth:'600px', width: '100%', margin: '0px auto' }}>\r\n                    <input className='popupBoxSmallTextAreaLeftEle' placeholder={ ( state.data?.price )?state.data?.price:'Price' } type=\"number\" name='price' id='singleNFTPrice' onChange={ handleTextInputChanges }  style={{opacity:100, zIndex:1}} />\r\n                    <input className='popupBoxSmallTextAreaRightEle' placeholder={ ( state.data?.royalties )?state.data?.royalties:'Royalties: max 50%' } type=\"number\" name='royalties' id='singleNFTRoyalty' onChange={handleTextInputChanges} style={{opacity:100, zIndex:1}} />\r\n                </div>\r\n                <Buttonz data={ { class:\"popupBoxEle\", id:'createBox', value:'create', func:handlesingleCreate } } />\r\n            </>\r\n        )\r\n            \r\n    };\r\n\r\n    // let singleNFTDetailsForm = (state.currsubState === \"SingleNFTDetailsForm\")?<SingleNFTDetailsForm/>:\"\";\r\n    return (\r\n        <div className='popupdark'>\r\n            <div className='popupBox'> \r\n                <button className='closeBoxWhite' onClick={()=> setState((prev)=>({...prev, state:\"home\", data:{ coll_name : null, coll_symbol : null, layers:[] }, currsubState:null })) } >X</button>\r\n                <SingleNFTDetailsForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleNft;"],"names":["props","useContext","StateContext","state","setState","MsgContext","setMsgStacks","msgStacks","handlesingleUpload","e","showLoading","fileLoaded","target","files","length","prev","messages","hideLoading","imgSignature","fl","console","log","file","readr","FileReader","addEventListener","data","path","result","readAsDataURL","handleTextInputChanges","ele","eleValue","value","getAttribute","name","stringLengthRange","isAplhaNumeric","collection","price","isNumeric","royalties","description","SingleNFTDetailsForm","handlesingleCreate","preventDefault","toLowerCase","strLen","pre64String","r","char","push","substate","currsubState","currentAddress","conntd","options","pinataMetadata","keyvalues","pinataOptions","cidVersion","base64ToBlob","fileBLOB","assetName","Date","now","pin_body","FormData","append","JSON","stringify","fetch","baseServerUri","method","body","then","res","json","piss","createNft","error","message","formdata","id","msg","results","mintNFT","IpfsHash","finally","resp","minted","code","classList","remove","hash","className","htmlFor","onClick","document","querySelector","click","style","padding","boxSizing","src","objectFit","height","width","alt","type","opacity","zIndex","onChange","hidden","placeholder","typeId","typeClass","flexDirection","maxWidth","margin","class","func","coll_name","coll_symbol","layers"],"sourceRoot":""}